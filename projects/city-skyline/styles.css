/* Step 25

That didn't work, because the variables you declared in .bb1 
do not cascade to the .bb2 and .bb3 sibling elements. 
That's just how CSS works. Because of this, variables are often declared 
in the :root selector. This is the highest level selector in CSS; 
putting your variables there will make them usable everywhere. 
Add the :root selector to the top of your stylesheet, and move 
all your variable declarations there.
 */
:root {
  --building-color1: #aa80ff;
  --building-color2: #66cc99;
  --building-color3: #cc6699;
  --building-color4: #538cc6;
  --window-color1:#bb99ff;
  --window-color2: #8cd9b3;
  --window-color3: #d98cb3;
  --window-color4 :#8cb3d9;
}
/* Step 110

Okay, the buildings are done. Go back to the * selector and remove 
the border you applied to everything at the beginning and the buildings
 will come together.
 */
* {
  box-sizing: border-box;
  /* border: 1px solid black; */
}

body {
  height: 100vh;
  margin: 0;
  /*  set the overflow property to hidden to hide any scroll bars 
    that appear when something extends past the viewport. */
  overflow: hidden;
}
.sky{
  /* Step 113

At the top of the sky gradient color list, where you would put a
 direction for the gradient; add circle closest-corner at 15% 15%,.
  This will move the start of the gradient to 15% from the top
   and left. It will make it end at the closest-corner and it will 
   maintain a circle shape. These are some keywords built into gradients
    to describe how it behaves.
 */
  background: radial-gradient(
    circle closest-corner at 15% 15%,
    #ffcf33 0%,
    #ffcf33 20%,
    #ffff66 21%,
    #bbeeff 100%
  );
}

.background-buildings, .foreground-buildings {
  width: 100%;
  height: 100%;
  display: flex;
  align-items: flex-end;
  justify-content: space-evenly;
}
.building-wrap{
  display: flex;
  flex-direction: column;
  align-items: center;
}
/* BACKGROUND BUILDINGS - "bb" stands for "background building" */

.bb1 {
  /* display: flex;
  flex-direction: column;
  align-items: center; */
  width: 10%;
  height: 70%;
  /* Step 14
Now you have something that is resembling a building. 
You are ready to create your first variable. Variable declarations begin
 with two dashes (-) and are given a name and a value like this:
  --variable-name: value;. In the .bb1 class, create a 
  variable named --building-color1 and give it a value of #999.
 */
  /* --building-color1: #999; moved to :root */
  /* Step 15
To use a variable, put the variable name in parentheses with 
var in front of them like this: var(--variable-name). */
  /* --building-color2:#66cc99;
--building-color3:#cc6699;

moved to :root*/
}

.bb1-window{
    background: linear-gradient(
      var(--building-color1),
      var(--window-color1)
    );
    height: 10%;
}

.bb1a {
  width: 70%;
}

.bb1b {
  width: 80%;
  
}

.bb1c {
  width: 90%;
 
}
.bb1d {
  width: 100%;
  height: 70%;
  background: linear-gradient(
    var(--building-color1) 50%,
    var(--window-color1)
  );
}

.bb2 {
  width: 10%;
  height: 50%;
  /* 
    Step 23

    That didn't work. You should add a fallback value to a variable by 
    putting it as the second value of where you use the variable like 
    this: var(--variable-name, fallback-value). 
    The property will use the fallback value when there's a problem 
    with the variable. 
     */
  /* background-color: var(--building-color2); */
}
/* creating a triangle */
.bb2a{
    /* margin: auto; */
    /* width: 5vw;
    height: 5vw; */
    /* border-top: 1vw solid #000; */
    border-bottom: 5vh solid var(--building-color2);
    border-left: 5vw solid transparent;
    border-right: 5vw solid transparent;
}
.bb2b{
    width: 100%;
    height: 100%;
    background: repeating-linear-gradient(
        var(--building-color2),
        var(--building-color2) 6%,
        var(--window-color2)6%,
        var(--window-color2) 9%
    );
}
.bb3 {
  width: 10%;
  height: 55%;
  background: repeating-linear-gradient(
    90deg,
    var(--building-color3),
    var(--building-color3),
    var(--window-color3) 15%
);
}

.bb4 {
    
  width: 11%;
  height: 58%;
}

.bb4a{
    width: 3%;  
    height: 10%;
    background-color: var(--building-color4);
  }
  .bb4b{
    width: 80%;
    height: 5%;
    background-color: var(--building-color4);
  }
  .bb4c{
      width: 100%;
      height: 85%;
      background-color: var(--building-color4);
  }
.bb4-window{
  width: 18%;
  height: 90%;
  background-color: var(--window-color4);
}
.window-wrap{
  display: flex;
  align-items: center;
  justify-content: space-evenly;
}
/* 
Step 34

Now that you did that, you can delete the old .foreground-buildings 
declaration and all of its properties since they aren't needed anymore.

*/
/* .foreground-buildings{
    display: flex;
    align-items: flex-end;
    justify-content: space-evenly;
    width: 100%;
    height: 100%;
    
} */
/* FOREGROUND BUILDINGS - "fb" stands for "foreground building" */
.fb1 {
  width: 10%;
  height: 60%;
}
.fb1a{
  /* Step 79

You're going to use some more border tricks for the top section.
 Add a border-bottom with a value of 7vh solid var(--building-color4) to 
 .fb1a. This will put a 7vh height border on the bottom.
  But since the element has zero size, it only shows up as a 2px wide line
   from the 1px border that is on all the elements.
 */
border-bottom: 7vh solid var(--building-color4);
/* Step 80

When you increase the size of the left and right borders,
 the border on the bottom will expand to be the width of 
 the combined left and right border widths. Add 2vw solid 
 transparent as the value of the border-left and border-right
  properties of .fb1a. They will be invisible, but it will make
   the border on the bottom 4vw wide.
 */
 border-left: 2vw solid transparent;
 border-right: 2vw solid transparent;
}
.fb1b{
  width: 60%;
  height: 10%;
  background-color: var(--building-color4);

}

.fb1c{
  width:100% ;
  height: 80%;
  background: repeating-linear-gradient(
    90deg,
    var(--building-color4),
    var(--building-color4)10%,
    transparent 10%,
    transparent 15%
  ),
  /* Step 78
You can add multiple gradients to an element by separating them
 with a comma (,) like this:

gradient1(
  colors
),
gradient2(
  colors
);
 */
 repeating-linear-gradient(
  var(--building-color4) 0%,
  var(--building-color4) 10%,
  var(--window-color4) 10%,
  var(--window-color4) 90%
);

}

.fb2 {
  width: 10%;
  height: 40%;
}
.fb2a{
  width: 100%;
  border-bottom: 10vh solid var(--building-color3);
  border-left: 1vw solid transparent;
  border-right: 1vw solid transparent;
}
.fb2b{
  width: 100%;
  height: 75%;
  background-color: var(--building-color3);

}
.fb2-window{
  width: 22%;
  height: 100%;
  background-color: var(--window-color3);
}
.fb3 {
  width: 10%;
  height: 35%;
}
.fb3a{
  width: 80%;
  height: 15%;
  background-color: var(--building-color1);

}
.fb3b{
  width: 100%;
  height: 35%;
  background-color: var(--building-color1);

}
.fb3-window{
  width: 25%;
  height: 80%;
  background-color: var(--window-color1);
}
.fb4 {
    position: relative;
    left: 10%;
    
  width: 8%;
  height: 45%;
}
.fb4a{
  border-top: 5vh solid transparent;
  border-left: 8vw solid var(--building-color1);
}
.fb4b{
  width: 100%;
  height: 89%;
  background-color: var(--building-color1);
  /* Step 102

Add display: flex and flex-wrap: wrap to the window container. 
This will put your windows side by side, and then push them down
 to a new row when they don't fit.
 */
  display: flex;
  flex-wrap: wrap;
}
.fb4-window{
  width: 30%;
  height: 10%;
  border-radius: 50%;
  background-color: var(--window-color1);
  margin: 10%;
}
.fb5 {
    position: relative;
    right: 10%;
  width: 10%;
  height: 33%;
  background: repeating-linear-gradient(
    var(--building-color2) 0%,
    var(--building-color2) 5%,
    transparent 5%,
    transparent 10%
  ),
  /* Step 105

Add another repeating-linear-gradient below the one you
 just added. Give it a 90deg direction, use your building
  color from 0% to 12% and window color 12% to 44%. This will
   make a bunch of rectangle windows.
in order to understand this effect remove one of the gradients each time
and see what happen.
   */
  repeating-linear-gradient(
    90deg,
    var(--building-color2) 0%,
    var(--building-color2) 12%,
    var(--window-color2) 12%,
    var(--window-color2) 44%
  );
}
.fb6 {
  width: 9%;
  height: 38%;
  background: repeating-linear-gradient(
    90deg,
    var(--building-color3),
    var(--building-color3) 10%,
    transparent 10%,
    transparent 30%
  ),
  repeating-linear-gradient(
    var(--building-color3),
    var(--building-color3) 10%,
    var(--window-color3) 10%,
    var(--window-color3) 30%
  );
}

.background-buildings,
.foreground-buildings {
  position: absolute;
  top: 0;
}


@media (max-width: 1000px){

/* Step 117 */
  :root{
    --building-color1: #000;
   --building-color2: #000;
   --building-color3: #000;
   --building-color4: #000;
   --window-color2: #777;
   --window-color1:#777;
  --window-color3: #777;
  --window-color4 :#777;
 }

  /* Step 115 Passed
Copy and paste your whole sky class along with all of its properties and 
values into the media query. You are going to make another color scheme 
for the skyline that changes it from day to night.
 */
  .sky {
    background: radial-gradient(
        closest-corner circle at 15% 15%,
          #ccc,
          #ccc 20%,
          #445 21%,
          #223 100%
      );
  }
}